6. Write C++ program to implement Floyd Warshall algorithm with suitable example.

	#include <iostream>
#include <vector>
#include <climits>
using namespace std;

class FloydWarshall {
private:
    int V;
    vector<vector<int>> dist;

public:
    FloydWarshall(int vertices) : V(vertices), dist(vertices, vector<int>(vertices, INT_MAX)) {
        for (int i = 0; i < V; i++) {
            dist[i][i] = 0;  // Distance from a vertex to itself is always 0
        }
    }

    void addEdge(int u, int v, int weight) {
        dist[u][v] = weight;
    }

    void floydWarshall() {
        for (int k = 0; k < V; k++) {
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX && dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
    }

    void printSolution() {
        cout << "Shortest distances between every pair of vertices:" << endl;
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][j] == INT_MAX) {
                    cout << "INF ";
                } else {
                    cout << dist[i][j] << " ";
                }
            }
            cout << endl;
        }
    }
};

int main() {
    int V = 4;
    FloydWarshall fw(V);

    fw.addEdge(0, 1, 3);
    fw.addEdge(0, 2, 7);
    fw.addEdge(1, 2, 2);
    fw.addEdge(1, 3, 1);
    fw.addEdge(2, 3, 5);

    fw.floydWarshall();
    fw.printSolution();

    return 0;
}


7. Write C++ program to perform the following operations on SET: a) Union

	#include <iostream>
#include <set>
using namespace std;

void printSet(const set<int>& s) {
    for (int elem : s) {
        cout << elem << " ";
    }
    cout << endl;
}

int main() {
    set<int> set1 = {1, 2, 3, 4};
    set<int> set2 = {3, 4, 5, 6};

    set<int> unionSet;
    
    // Perform union using the insert function
    unionSet = set1;
    unionSet.insert(set2.begin(), set2.end());

    cout << "Union of Set1 and Set2: ";
    printSet(unionSet);

    return 0;
}


8. Write C++ programs to implement: a) Sequential File.

	#include <iostream>
#include <fstream>
#include <string>
using namespace std;

void createSequentialFile(const string& filename) {
    ofstream outFile(filename);

    if (outFile.is_open()) {
        outFile << "Alice, 23\n";
        outFile << "Bob, 30\n";
        outFile << "Charlie, 25\n";
        outFile << "David, 35\n";
        outFile.close();
        cout << "File created successfully!" << endl;
    } else {
        cout << "Error opening file!" << endl;
    }
}

void readSequentialFile(const string& filename) {
    ifstream inFile(filename);
    string name;
    int age;

    if (inFile.is_open()) {
        while (inFile >> name >> age) {
            cout << "Name: " << name << ", Age: " << age << endl;
        }
        inFile.close();
    } else {
        cout << "Error opening file!" << endl;
    }
}

int main() {
    string filename = "people.txt";

    createSequentialFile(filename);
    cout << "Reading from the file:\n";
    readSequentialFile(filename);

    return 0;
}


9. Write C++ program to implement AVL tree with RR-rotations.

	#include <iostream>
#include <algorithm>
using namespace std;

class AVLTree {
private:
    struct Node {
        int key;
        Node* left;
        Node* right;
        int height;
        Node(int val) : key(val), left(nullptr), right(nullptr), height(1) {}
    };

    Node* root;

    int height(Node* node) {
        return node ? node->height : 0;
    }

    int balanceFactor(Node* node) {
        return node ? height(node->left) - height(node->right) : 0;
    }

    Node* rightRotate(Node* y) {
        Node* x = y->left;
        y->left = x->right;
        x->right = y;
        y->height = max(height(y->left), height(y->right)) + 1;
        x->height = max(height(x->left), height(x->right)) + 1;
        return x;
    }

    Node* leftRotate(Node* x) {
        Node* y = x->right;
        x->right = y->left;
        y->left = x;
        x->height = max(height(x->left), height(x->right)) + 1;
        y->height = max(height(y->left), height(y->right)) + 1;
        return y;
    }

    Node* insert(Node* node, int key) {
        if (!node) return new Node(key);

        if (key < node->key)
            node->left = insert(node->left, key);
        else if (key > node->key)
            node->right = insert(node->right, key);

        node->height = 1 + max(height(node->left), height(node->right));

        int balance = balanceFactor(node);

        if (balance > 1 && key < node->left->key)
            return rightRotate(node);  // RR Rotation

        return node;
    }

    void inorder(Node* node) {
        if (node) {
            inorder(node->left);
            cout << node->key << " ";
            inorder(node->right);
        }
    }

public:
    AVLTree() : root(nullptr) {}

    void insert(int key) {
        root = insert(root, key);
    }

    void inorder() {
        inorder(root);
        cout << endl;
    }
};

int main() {
    AVLTree tree;
    tree.insert(30);
    tree.insert(20);
    tree.insert(10); // RR Rotation will be triggered

    cout << "In-order traversal of the AVL tree: ";
    tree.inorder();

    return 0;
}


10. Write C++ program to implement AVL tree with LL-rotations.

	#include <iostream>
#include <algorithm>
using namespace std;

class AVLTree {
private:
    struct Node {
        int key;
        Node* left;
        Node* right;
        int height;
        Node(int val) : key(val), left(nullptr), right(nullptr), height(1) {}
    };

    Node* root;

    int height(Node* node) {
        return node ? node->height : 0;
    }

    int balanceFactor(Node* node) {
        return node ? height(node->left) - height(node->right) : 0;
    }

    Node* leftRotate(Node* x) {
        Node* y = x->right;
        x->right = y->left;
        y->left = x;
        x->height = max(height(x->left), height(x->right)) + 1;
        y->height = max(height(y->left), height(y->right)) + 1;
        return y;
    }

    Node* rightRotate(Node* y) {
        Node* x = y->left;
        y->left = x->right;
        x->right = y;
        y->height = max(height(y->left), height(y->right)) + 1;
        x->height = max(height(x->left), height(x->right)) + 1;
        return x;
    }

    Node* insert(Node* node, int key) {
        if (!node) return new Node(key);

        if (key < node->key)
            node->left = insert(node->left, key);
        else if (key > node->key)
            node->right = insert(node->right, key);

        node->height = 1 + max(height(node->left), height(node->right));

        int balance = balanceFactor(node);

        if (balance < -1 && key > node->right->key)
            return leftRotate(node); // LL Rotation

        return node;
    }

    void inorder(Node* node) {
        if (node) {
            inorder(node->left);
            cout << node->key << " ";
            inorder(node->right);
        }
    }

public:
    AVLTree() : root(nullptr) {}

    void insert(int key) {
        root = insert(root, key);
    }

    void inorder() {
        inorder(root);
        cout << endl;
    }
};

int main() {
    AVLTree tree;
    tree.insert(10);
    tree.insert(20);
    tree.insert(30); // LL Rotation will be triggered

    cout << "In-order traversal of the AVL tree: ";
    tree.inorder();

    return 0;
}
